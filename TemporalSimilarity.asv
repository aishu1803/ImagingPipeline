function TemporalSimilarity(trials)
[dpca_data,firingRates,firingRatesAverage,trialNum,ind_ee] = DataPreProcess(trials,0,1);
combinedParams = {{1, [1 3]}, {2, [2 3]}, {3}, {[1 2], [1 2 3]}};
margNames = {'Stimulus', 'Decision', 'Condition-independent', 'S/D Interaction'};
margColours = [23 100 171; 187 20 25; 150 150 150; 114 97 171]/256;
time = [];
timeEvents = [];
ifSimultaneousRecording = true;
optimalLambda = dpca_optimizeLambda(firingRatesAverage, firingRates, trialNum, ...
    'combinedParams', combinedParams, ...
    'simultaneous', ifSimultaneousRecording, ...
    'numRep', 10, ...  % increase this number to ~10 for better accuracy
    'filename', 'tmp_optimalLambdas.mat');

Cnoise = dpca_getNoiseCovariance(firingRatesAverage, ...
    firingRates, trialNum, 'simultaneous', ifSimultaneousRecording);

[W,V,whichMarg] = dpca(firingRatesAverage, 10, ...
    'combinedParams', combinedParams, ...
    'lambda', optimalLambda, ...
    'Cnoise', Cnoise);

explVar = dpca_explainedVariance(firingRatesAverage, W, V, ...
    'combinedParams', combinedParams);
[firingRates_taskonly,Trajs_taskonly,firingRates_timeonly,Trajs_timeonly] = ReconstructTrajs(firingRates,V,W,trialNum,whichMarg);
corr_nogo = squeeze(firingRates_taskonly(:,1,1,:,:));
corr_go = squeeze(firingRates_taskonly(:,2,1,:,:));
err_nogo = squeeze(firingRates_taskonly(:,1,2,:,1:trialNum(1,1,2)));
err_go = squeeze(firingRates_taskonly(:,2,2,:,1:trialNum(1,2,2)));


end
